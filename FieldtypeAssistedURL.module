<?php
/**
 * Class FieldtypeAssistedURL
 *
 * Modified by Adrian Jones to support storing URL as page ID
 *
 * @author Marco Stoll <m.stoll@core4.de>
 * @link http://core4.de CORE4 GmbH & Co. KG
 * @copyright Copyright (c) 2015, CORE4 GmbH & Co. KG
 * @license MIT http://opensource.org/licenses/MIT
 * @version 1.0.0
 * @see http://www.processwire.com
 * @filesource
 */

/**
 * Class FieldtypeAssistedURL
 */
class FieldtypeAssistedURL extends FieldtypeURL {
    /**
     * Get information about this module
     *
     * @return array
     */
    public static function getModuleInfo() {
        return [
            'title' => 'AssistedURL Field',
            'version' => '2.0.0',
            'summary' => 'Field that stores an URL providing controls for selecting internal pages and files.',
            'author' => 'Marco Stoll, Adrian Jones',
            'installs' => 'InputfieldAssistedURL',
        ];
    }

    /**
     * Per Module interface, this template method is called when all system classes are loaded and ready for API usage
     */
    public function init() {
        parent::init();
    }

    /**
     * Return new instance of the Inputfield associated with this Fieldtype
     *
     * @param Page $page
     * @param Field $field
     * @return Inputfield
     */
    public function getInputfield(Page $page, Field $field) {
        /** @var InputfieldAssistedURL $inputField */
        $inputField = $this->modules->get("InputfieldAssistedURL");
        $inputField->setPage($page);

        return $inputField;
    }

    /**
     * get values converted when fetched from db
     *
     */
    public function ___wakeupValue(Page $page, Field $field, $value) {
        $urlParts = explode("?", $value);
        if(is_numeric($urlParts[0])) {
            $return = $this->wire('pages')->get($urlParts[0])->url . (isset($urlParts[1]) ? '?' . $urlParts[1] : '');
        }
        else {
            $return = $value;
        }
        return $return;
    }

    /**
     * return converted from object to array for storing in database
     *
     */
    public function ___sleepValue(Page $page, Field $field, $value) {
        foreach($this->wire('config')->httpHosts as $host) {
			$temp = preg_replace('#^https?://#', '', $value);
            if (strpos($temp, $host) === 0) {
                $value = str_replace($host, '', $value);
                $value = preg_replace('#^https?://#', '', $value);
            }
        }
        if(strpos($value, '//') === false) {
            $urlParts = explode("?", $value);

            if($this->wire('config')->urls->root !== '/') {
                $urlPage = "/" . str_replace($this->wire('config')->urls->root, "", $urlParts[0]);
            }
            else {
                $urlPage = $urlParts[0];
            }

            $p = $this->wire('pages')->get(trim($urlPage, '.'));
            if($p->id) {
                $return = $p->id . (isset($urlParts[1]) ? '?' . $urlParts[1] : '');
            }
            else {
                $return = $value;
            }
        }
        else {
            $return = $value;
        }
        return $return;
    }

}
